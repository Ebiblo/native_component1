{"version":3,"sources":["normalizeSnapPoints.ts"],"names":["height","windowHeight","Dimensions","get","normalizeSnapPoints","snapPoints","topInset","map","snapPoint","Number","split"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,MAAM,EAAEC;AAAV,IAA2BC,wBAAWC,GAAX,CAAe,QAAf,CAAjC;AAEA;;;;;AAGO,MAAMC,mBAAmB,GAAG,CACjCC,UADiC,EAEjCC,QAFiC,KAIjCD,UAAU,CAACE,GAAX,CAAeC,SAAS,IAAI;AAC1B,4CAAkBA,SAAlB;AACA,SAAO,OAAOA,SAAP,KAAqB,QAArB,GACHA,SADG,GAEFC,MAAM,CAACD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAAN,IAAmCT,YAAY,GAAGK,QAAlD,CAAD,GAAgE,GAFpE;AAGD,CALD,CAJK","sourcesContent":["import { Dimensions } from 'react-native';\nimport { validateSnapPoint } from './validateSnapPoint';\n\nconst { height: windowHeight } = Dimensions.get('window');\n\n/**\n * Converts snap points with percentage to fixed numbers.\n */\nexport const normalizeSnapPoints = (\n  snapPoints: Array<number | string>,\n  topInset: number\n) =>\n  snapPoints.map(snapPoint => {\n    validateSnapPoint(snapPoint);\n    return typeof snapPoint === 'number'\n      ? snapPoint\n      : (Number(snapPoint.split('%')[0]) * (windowHeight - topInset)) / 100;\n  });\n"]}