{"version":3,"sources":["useTransition.ts"],"names":["useMemo","Animated","eq","set","add","greaterOrEq","lessOrEq","and","not","clockRunning","startClock","timing","stopClock","multiply","neq","onChange","or","cond","block","State","useClock","useValue","snapPoint","GESTURE","useTransition","animationDuration","animationEasing","contentPanGestureState","contentPanGestureTranslationY","contentPanGestureVelocityY","handlePanGestureState","handlePanGestureTranslationY","handlePanGestureVelocityY","scrollableContentOffsetY","snapPoints","initialPosition","currentGesture","UNDETERMINED","currentPosition","isPanningContent","ACTIVE","isPanningHandle","isPanning","shouldAnimate","manualSnapToPoint","clock","config","toValue","Value","duration","easing","animationState","finished","position","frameTime","time","finishTiming","translateY","CONTENT","velocityY","isAnimationInterrupted","HANDLE","END"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\nimport Animated, {\n  eq,\n  set,\n  add,\n  greaterOrEq,\n  lessOrEq,\n  and,\n  not,\n  clockRunning,\n  startClock,\n  timing,\n  stopClock,\n  multiply,\n  neq,\n  onChange,\n  or,\n  cond,\n  block,\n  // debug,\n} from 'react-native-reanimated';\nimport { State } from 'react-native-gesture-handler';\nimport { useClock, useValue, snapPoint } from 'react-native-redash';\nimport type { BottomSheetAnimationConfigs } from './types';\nimport { GESTURE } from '../../constants';\n\ninterface TransitionProps extends Required<BottomSheetAnimationConfigs> {\n  contentPanGestureState: Animated.Value<State>;\n  contentPanGestureTranslationY: Animated.Value<number>;\n  contentPanGestureVelocityY: Animated.Value<number>;\n\n  handlePanGestureState: Animated.Value<State>;\n  handlePanGestureTranslationY: Animated.Value<number>;\n  handlePanGestureVelocityY: Animated.Value<number>;\n\n  scrollableContentOffsetY: Animated.Value<number>;\n  snapPoints: number[];\n  initialPosition: number;\n}\n\nexport const useTransition = ({\n  animationDuration,\n  animationEasing,\n  contentPanGestureState,\n  contentPanGestureTranslationY,\n  contentPanGestureVelocityY,\n  handlePanGestureState,\n  handlePanGestureTranslationY,\n  handlePanGestureVelocityY,\n  scrollableContentOffsetY,\n  snapPoints,\n  initialPosition,\n}: TransitionProps) => {\n  const currentGesture = useValue<GESTURE>(GESTURE.UNDETERMINED);\n  const currentPosition = useValue(initialPosition);\n\n  const isPanningContent = useMemo(\n    () => eq(contentPanGestureState, State.ACTIVE),\n    [contentPanGestureState]\n  );\n  const isPanningHandle = useMemo(\n    () => eq(handlePanGestureState, State.ACTIVE),\n    [handlePanGestureState]\n  );\n  const isPanning = useMemo(() => or(isPanningContent, isPanningHandle), [\n    isPanningContent,\n    isPanningHandle,\n  ]);\n  const shouldAnimate = useValue(0);\n  const manualSnapToPoint = useValue<number>(-1);\n\n  const clock = useClock();\n  const config = useMemo(\n    () => ({\n      toValue: new Animated.Value(0),\n      duration: animationDuration,\n      easing: animationEasing,\n    }),\n    [animationEasing, animationDuration]\n  );\n\n  const animationState = useMemo(\n    () => ({\n      finished: new Animated.Value(0),\n      position: new Animated.Value(initialPosition),\n      frameTime: new Animated.Value(0),\n      time: new Animated.Value(0),\n    }),\n    [initialPosition]\n  );\n\n  const finishTiming = useMemo(\n    () => [\n      set(currentGesture, GESTURE.UNDETERMINED),\n      set(shouldAnimate, 0),\n      set(currentPosition, config.toValue),\n      set(animationState.frameTime, 0),\n      set(animationState.time, 0),\n      stopClock(clock),\n    ],\n    [\n      animationState.frameTime,\n      animationState.time,\n      clock,\n      config.toValue,\n      currentGesture,\n      currentPosition,\n      shouldAnimate,\n    ]\n  );\n\n  const translateY = useMemo(\n    () =>\n      cond(\n        eq(currentGesture, GESTURE.CONTENT),\n        cond(\n          eq(currentPosition, 0),\n          add(\n            contentPanGestureTranslationY,\n            multiply(scrollableContentOffsetY, -1)\n          ),\n          contentPanGestureTranslationY\n        ),\n        handlePanGestureTranslationY\n      ),\n    [\n      contentPanGestureTranslationY,\n      currentGesture,\n      currentPosition,\n      handlePanGestureTranslationY,\n      scrollableContentOffsetY,\n    ]\n  );\n  const velocityY = useMemo(\n    () =>\n      cond(\n        eq(currentGesture, GESTURE.CONTENT),\n        contentPanGestureVelocityY,\n        handlePanGestureVelocityY\n      ),\n    [contentPanGestureVelocityY, currentGesture, handlePanGestureVelocityY]\n  );\n  const isAnimationInterrupted = useMemo(\n    () => and(clockRunning(clock), or(isPanning, neq(manualSnapToPoint, -1))),\n    [clock, isPanning, manualSnapToPoint]\n  );\n  const position = useMemo(\n    () =>\n      block([\n        // debug('current gesture', currentGesture),\n        /**\n         * In case animation get interrupted, we execute the finishTiming node and\n         * set current position the the animated position.\n         */\n        cond(isAnimationInterrupted, [\n          // // debug('animation interrupted', isAnimationInterrupted),\n          finishTiming,\n          set(currentPosition, animationState.position),\n        ]),\n\n        /**\n         * Panning node\n         */\n        cond(isPanning, [\n          set(\n            currentGesture,\n            cond(isPanningContent, GESTURE.CONTENT, GESTURE.HANDLE)\n          ),\n          // debug('start panning', translateY),\n          cond(\n            not(greaterOrEq(add(currentPosition, translateY), 0)),\n            [set(animationState.position, 0), set(animationState.finished, 0)],\n            cond(\n              not(lessOrEq(add(currentPosition, translateY), snapPoints[0])),\n              [\n                set(animationState.position, snapPoints[0]),\n                set(animationState.finished, 0),\n              ],\n              [\n                set(animationState.position, add(currentPosition, translateY)),\n                set(animationState.finished, 0),\n              ]\n            )\n          ),\n        ]),\n\n        /**\n         * Gesture ended node.\n         */\n        onChange(\n          add(contentPanGestureState, handlePanGestureState),\n          cond(\n            or(\n              and(\n                eq(currentGesture, GESTURE.CONTENT),\n                eq(contentPanGestureState, State.END)\n              ),\n              and(\n                eq(currentGesture, GESTURE.HANDLE),\n                eq(handlePanGestureState, State.END)\n              )\n            ),\n            [\n              // debug('gesture end', currentGesture),\n              set(\n                config.toValue,\n                snapPoint(\n                  add(currentPosition, translateY),\n                  velocityY,\n                  snapPoints\n                )\n              ),\n              set(shouldAnimate, 1),\n            ]\n          )\n        ),\n        /**\n         * Manual snapping node.\n         */\n        cond(neq(manualSnapToPoint, -1), [\n          // debug('Manually snap to', manualSnapToPoint),\n          set(config.toValue, manualSnapToPoint),\n          set(animationState.finished, 0),\n          set(shouldAnimate, 1),\n          set(manualSnapToPoint, -1),\n        ]),\n\n        /**\n         * Animation Node.\n         */\n        cond(shouldAnimate, [\n          // debug('start animating', shouldAnimate),\n          cond(and(not(clockRunning(clock)), not(animationState.finished)), [\n            set(animationState.finished, 0),\n            set(animationState.frameTime, 0),\n            set(animationState.time, 0),\n            startClock(clock),\n          ]),\n          timing(clock, animationState, config),\n          cond(animationState.finished, finishTiming),\n        ]),\n\n        animationState.position,\n      ]),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [snapPoints]\n  );\n\n  return {\n    position,\n    manualSnapToPoint,\n    currentPosition,\n    currentGesture,\n  };\n};\n"]}